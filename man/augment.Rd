% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/emuR_segmentlistExtensions.R
\name{augment}
\alias{augment}
\title{Add information from one segment list to another}
\usage{
augment(dbHandle, segs, parentSegs, add.metadata = FALSE)
}
\arguments{
\item{dbHandle}{An \code{emuR} database handle.}

\item{segs}{An \code{\link[dplyr]{tibble}} resulting from a \code{\link[emuR]{query}} call.}

\item{parentSegs}{An additional  \code{\link[dplyr]{tibble}} (or a legacy \code{\link[emuR]{emuRsegs}}) the result of a \code{\link[emuR]{query}}, and contains additional information that should be added to the \code{segs} argument object.}

\item{add.metadata}{Boolean: Should metadata associated with the bundle from which \code{segs} was returned be attached to the output "tibble" as columns? #TODO}
}
\value{
A "tibble" that has the columns of the \code{segs}, but with the
columns of \code{parentSegs} appended to the right. A parent is matched
with its decendant by the part of the time line of the signal that they
share. That is, a label A will be on the same row as the parent P if, for
instance, sample_start > parent_sample_start and sample_end <
parent_sampe_end in the output. The user may therefore use this function to
combine data without restructuring the entire database, or add additional
data not from the database.

A prefix "parent_" is added to all the columns
in \code{parentSegs}.
}
\description{
This function may be used to attach additional information to a segment list.
The additional information comes from a second segment list
containing annotations that are ancestors of labels in the first segment list.
That is, the ancestors should span the decendent labels in time. The labels
that add information could come for instance from a \code{\link{requery_hier}} call
but could also be the result of an entirely separate query.
}
\details{
It is important to note that the information in the two segment lists
are merged by start and stop time, and not by hierarchy.
}
\examples{
reindeer:::create_ae_db() -> ae
emuR::query(ae,"Word =~ .*") -> wd
emuR::query(ae,"Utterance =~ .*") -> wd
augment(ae,wd,utt) \%>\% glimpse()
reindeer:::detach_demo_db()


}
