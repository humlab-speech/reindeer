% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reindeeR_signalextensions.R
\name{add_trackDefinition}
\alias{add_trackDefinition}
\title{Call any function to compute an EmuR SSFF track definition.}
\usage{
add_trackDefinition(
  emuDBhandle,
  name,
  columnName = NULL,
  fileExtension = NULL,
  onTheFlyFunctionName = NULL,
  onTheFlyParams = list(),
  onTheFlyOptLogFilePath = NULL,
  inputTrackExtension = NULL,
  defaultAge = 35,
  overwriteFiles = FALSE,
  package = "superassp",
  verbose = TRUE,
  interactive = TRUE
)
}
\arguments{
\item{emuDBhandle}{emuDB handle as returned by \code{\link[emuR]{load_emuDB}}}

\item{name}{name of ssffTrackDefinition}

\item{columnName}{columnName of ssffTrackDefinition.
If the \code{onTheFlyFunctionName} parameter is set and columnName isn't, the
\code{columnName} will default to the first entry in \code{wrasspOutputInfos[[onTheFlyFunctionName]]$tracks}.}

\item{fileExtension}{fileExtension of ssffTrackDefinitions.
If the \code{onTheFlyFunctionName} parameter is set and fileExtension isn't, the
\code{fileExtension} will default to the first entry in \code{wrasspOutputInfos[[onTheFlyFunctionName]]$ext}.}

\item{onTheFlyFunctionName}{name of wrassp function to do on-the-fly calculation. If set to the name of a wrassp 
signal processing function, not only the emuDB schema is extended by the ssffTrackDefintion but also 
the track itself is calculated from the signal file and stored in the emuDB. See \code{names(wrasspOutputInfos)}
for a list of all the signal processing functions provided by the wrassp package.}

\item{onTheFlyParams}{a list of parameters that will be given to the function 
passed in by the onTheFlyFunctionName parameter. This list can easily be 
generated using the \code{\link{formals}} function on the according signal processing function 
provided by the wrassp package and then setting the
parameter one wishes to change.}

\item{onTheFlyOptLogFilePath}{path to optional log file for on-the-fly function}

\item{verbose}{Show progress bars and further information}

\item{interactive}{ask user for confirmation}
}
\description{
This function behaves like \link[emuR:AddListRemoveSsffTrackDefinition]{emuR::add_ssffTrackDefinition}, but
can also take a well defined function (see below) not defined in the
\code{wrassp} package and apply it to speech signal files in an Emu database.
}
\details{
This will be a new section

What is a well defined function

The \code{add_trackDefinition} needs to know
\enumerate{
\item what SSFF tracks there will be in the output of the function, and
\item what file extension is prefered for the track.
}

The function will attempt to get these pieces of information from one of
two sources (in order)
\enumerate{
\item the \link[wrassp:wrasspOutputInfos]{wrassp::wrasspOutputInfos} structure of lists, so that
the functions defined in \code{wrassp} is handled transparently, or
\item the contents of the attributes "ext" and "tracks" set on the function.
}

If found, the \link{add_trackDefinition} function will apply the signal generating function to all media files, and record the new tracks as
SSFF track definitions in the database using \link[emuR:AddListRemoveSsffTrackDefinition]{emuR::add_ssffTrackDefinition} in order to ensure compitability
}
\examples{
require(superassp)
reindeer:::create_ae_db() -> ae
emuR::list_ssffTrackDefinitions(ae)
?praat_formant_burg
#This calls the praat_formant_burg function with default parameters
add_trackDefinition(ae,name="FORMANTS",columnName = "fm",fileExtension = "pfm",onTheFlyFunctionName = "praat_formant_burg")
#Compute formants with non-default parameters using Praat.
add_trackDefinition(ae,name="pfm",columnName = "fm",fileExtension = "pfm",onTheFlyFunctionName = "praat_formant_burg",onTheFlyParams=list(numFormants=3,window="hamming",maxhzformant=4000))
emuR::list_ssffTrackDefinitions(ae)
#Use the standard wrassp::forest function to compute the formants, using the defaults for female speakers
add_trackDefinition(ae,name="ffm",columnName = "fm",fileExtension = "ffm",onTheFlyFunctionName = "forest",onTheFlyParams=list(numFormants=3,gender="f"))
#And, you can attach another track definition to the same Praat-genereated file if you like.
add_trackDefinition(ae,name="bw",columnName = "bw",fileExtension = "pfm")
emuR::list_ssffTrackDefinitions(ae)
reindeer:::detach_demo_db(ae)


}
