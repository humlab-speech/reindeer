% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reindeeR_signalextensions.R
\name{add_trackDefinition}
\alias{add_trackDefinition}
\title{Call any function to compute an EmuR SSFF track definition.}
\usage{
add_trackDefinition(
  emuDBhandle,
  name,
  columnName = NULL,
  fileExtension = NULL,
  onTheFlyFunctionName = NULL,
  onTheFlyParams = list(),
  onTheFlyOptLogFilePath = NULL,
  inputTrackExtension = "wav",
  defaultAge = 35,
  overwriteFiles = FALSE,
  verbose = TRUE,
  package = "superassp"
)
}
\arguments{
\item{emuDBhandle}{The database handle.}

\item{name}{The name of the SSFF track to list in the database.}

\item{columnName}{The name of the column in the SSFF file to associate with the track.}

\item{fileExtension}{The file extension of the created or already existing SSFF file.}

\item{onTheFlyFunctionName}{The name of the function to apply to the input signal to produce the output track. This function must have attributes "ext" and "tracks" defined to give information on what output may be expected from using them. Alternatively, the function may be defined in the package \link{wrassp} and therefore well known. The function also has state, via an attribute \code{outputType}, that it will create an SSFF track.}

\item{onTheFlyParams}{An optional list of arguments to the \code{onTheFlyFunctionName} function. Default arguments will be derived from Age and Gender metadata too, so this parameter should mainly be used for arguments that should be applied identically to all input files.}

\item{onTheFlyOptLogFilePath}{The logging output directory.}

\item{inputTrackExtension}{The file extension of the input file. If \code{NULL}, the '"mediafileExtension' set in the database template file (defaults to "wav") will be used.}

\item{defaultAge}{The default age to use when the user has not set a speaker "Age" metadata for the bundle or session. The user is \emph{strongly} encouraged to set the age of the speaker explicitly as metadata, and not to rely on this default setting.}

\item{overwriteFiles}{If set to \code{TRUE}, the function will calculate SSFF track files for ALL bundles and write them into the database, overwriting existing files. The default is \code{FALSE} which means that only only bundles which do not have an track file with the indicated output extension will be written.}

\item{verbose}{Determines wheter the function should display output to the user. If \code{FALSE}, the function will run completely silent and only report error messages back to the user.}

\item{package}{The name of the package in which tbe funciton \code{onTheFlyFunctionName} is defined.}
}
\description{
This function behaves like \link[emuR:AddListRemoveSsffTrackDefinition]{emuR::add_ssffTrackDefinition}, but
can also take a well defined function (see below) not defined in the
\code{wrassp} package and apply it to speech signal files in an Emu database.
}
\details{
This will be a new section

What is a well defined function

The \code{add_trackDefinition} needs to know
\enumerate{
\item what SSFF tracks there will be in the output of the function, and
\item what file extension is prefered for the track.
}

The function will attempt to get these pieces of information from one of
two sources (in order)
\enumerate{
\item the \link[wrassp:wrasspOutputInfos]{wrassp::wrasspOutputInfos} structure of lists, so that
the functions defined in \code{wrassp} is handled transparently, or
\item the contents of the attributes "ext" and "tracks" set on the function.
}

If found, the \link{add_trackDefinition} function will apply the signal generating function to all media files, and record the new tracks as
SSFF track definitions in the database using \link[emuR:AddListRemoveSsffTrackDefinition]{emuR::add_ssffTrackDefinition} in order to ensure compatibility
}
\examples{
require(superassp)
reindeer:::create_ae_db() -> ae
emuR::list_ssffTrackDefinitions(ae)
?praat_formant_burg
#This calls the praat_formant_burg function with default parameters
add_trackDefinition(ae,name="FORMANTS",columnName = "fm",fileExtension = "pfm",onTheFlyFunctionName = "praat_formant_burg")
#Compute formants with non-default parameters using Praat.
add_trackDefinition(ae,name="pfm",columnName = "fm",fileExtension = "pfm",onTheFlyFunctionName = "praat_formant_burg",onTheFlyParams=list(numFormants=3,window="hamming",maxhzformant=4000))
emuR::list_ssffTrackDefinitions(ae)
#Use the standard wrassp::forest function to compute the formants, using the defaults for female speakers
add_trackDefinition(ae,name="ffm",columnName = "fm",fileExtension = "ffm",onTheFlyFunctionName = "forest",onTheFlyParams=list(numFormants=3,gender="f"))
#And, you can attach another track definition to the same Praat-genereated file if you like.
add_trackDefinition(ae,name="bw",columnName = "bw",fileExtension = "pfm")
emuR::list_ssffTrackDefinitions(ae)
reindeer:::detach_demo_db(ae)


}
